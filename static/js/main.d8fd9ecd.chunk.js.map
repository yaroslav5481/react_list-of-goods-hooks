{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","NONE","sortField","setSortField","sortReverse","setSortReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,MAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAEMC,EAhCR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,YAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAAUe,SACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAOcS,CACnBnB,EAAiB,CAAEI,YAAWE,gBAkBhC,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAnBe,WACrBhB,EAAaN,EAAUe,WAmBjBQ,KAAK,SACLF,UAAWG,IAAG,iBACZ,CAAE,WAAYnB,IAAcL,EAAUe,WAJ1C,iCASA,wBACEO,QAxBa,WACnBhB,EAAaN,EAAUiB,SAwBjBM,KAAK,SACLF,UAAWG,IAAG,iBACZ,CAAE,WAAYnB,IAAcL,EAAUiB,SAJ1C,4BASA,wBACEK,QA7BQ,kBAAMd,GAAgBD,IA8B9BgB,KAAK,SACLF,UAAWG,IAAG,oBACZ,CAAE,YAAajB,IAJnB,sBASEF,GAAaE,IACb,wBACEgB,KAAK,SACLF,UAAU,4BACVC,QAvCI,WACZhB,EAAaN,EAAUI,MACvBI,GAAe,IAkCT,sBAUJ,6BACE,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,cC3HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d8fd9ecd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ninterface FilterParams {\n  sortField: SortField;\n  sortReverse: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, sortReverse }: FilterParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortField.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (sortReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.NONE);\n  const [sortReverse, setSortReverse] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, { sortField, sortReverse },\n  );\n\n  const sortByAlphabet = () => {\n    setSortField(SortField.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortField(SortField.LENGTH);\n  };\n\n  const reverse = () => setSortReverse(!sortReverse);\n\n  const reset = () => {\n    setSortField(SortField.NONE);\n    setSortReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={sortByAlphabet}\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortField.ALPHABET })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={sortByLength}\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortField.LENGTH })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={reverse}\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !sortReverse })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || sortReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}